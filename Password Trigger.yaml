---
- name: Create ServiceNow Catalog Request for Password Reset
  hosts: localhost
  gather_facts: no
 
  vars:
    servicenow_instance: "https://dev247928.service-now.com/"  # ServiceNow URL
    servicenow_username: "admin"                               # ServiceNow username
    servicenow_password: "%ml4Vs9RXE/s"                        # ServiceNow password
    catalog_sys_id: "d58f4b528388e210d081f696feaad399"         # Catalog sys_id
    user_email: "Akhilakki@amitomar63gmail.onmicrosoft.com"    # User email
    password: "NewPassword@123"                                # New password
    approval_timeout: 600                                      # 10 minutes timeout
    approval_interval: 30                                      # Check every 30 seconds
    workflow_name: "Azure Password Reset Flow"                  # AWX Workflow Name

  tasks:
    # ✅ Step 1: Create Catalog Request
    - name: Create Catalog Request
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_request"
        method: POST
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          short_description: "Password reset request for {{ user_email }}"
          requested_for: "{{ servicenow_username }}"
        body_format: json
        return_content: yes
        status_code: [200, 201]
      register: request_response

    - name: Extract Request ID
      set_fact:
        request_sys_id: "{{ request_response.json.result.sys_id }}"

    # ✅ Step 2: Create Request Item
    - name: Create Request Item
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_req_item"
        method: POST
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          request: "{{ request_sys_id }}"
          cat_item: "{{ catalog_sys_id }}"
          quantity: 1
        body_format: json
        return_content: yes
        status_code: [200, 201]
      register: item_response

    - name: Extract Request Item ID
      set_fact:
        item_sys_id: "{{ item_response.json.result.sys_id }}"

    # ✅ Step 3: Add Variables to the Catalog Request Item
    - name: Add Email Variable to Request Item
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_item_option_mtom"
        method: POST
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          request_item: "{{ item_sys_id }}"
          item_option: "user_email"
          value: "{{ user_email }}"
        body_format: json
        return_content: yes
        status_code: [200, 201]

    - name: Add Password Variable to Request Item
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_item_option_mtom"
        method: POST
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          request_item: "{{ item_sys_id }}"
          item_option: "password"
          value: "{{ password }}"
        body_format: json
        return_content: yes
        status_code: [200, 201]

    # ✅ Step 4: Display Request Details
    - name: Display Request Details
      debug:
        msg:
          - "Catalog Request Created: {{ request_sys_id }}"
          - "Request Item ID: {{ item_sys_id }}"

    # ✅ Step 5: Wait for Manager Approval
    - name: Wait for Manager Approval
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_req_item/{{ item_sys_id }}"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
        status_code: 200
      register: approval_status
      until: approval_status.json.result.approval == "approved"
      retries: "{{ approval_timeout // approval_interval }}"
      delay: "{{ approval_interval }}"
      ignore_errors: yes

    - name: Validate Approval Status
      fail:
        msg: "Request was NOT approved in time!"
      when: approval_status.json.result.approval != "approved"

    # ✅ Step 6: Retrieve Request Variables
    - name: Retrieve Request Variables
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_item_option_mtom?sysparm_query=request_item={{ item_sys_id }}"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
        status_code: 200
      register: variables_response

    - name: Extract Variables
      set_fact:
        catalog_variables: >
          {{
            variables_response.json.result | items2dict(key_name='item_option', value_name='value')
          }}

    - name: Debug Variables
      debug:
        var: catalog_variables

    # ✅ Step 7: Trigger Azure Password Reset Flow (AWX)
    - name: Trigger AWX Job for Azure Password Reset
      awx.awx.job_launch:
        job_template: "{{ workflow_name }}"
        extra_vars:
          user_principal_name: "{{ catalog_variables['user_email'] }}"
          new_password: "{{ catalog_variables['password'] }}"
      register: workflow_launch

    - name: Debug AWX Workflow Execution
      debug:
        msg:
          - "Workflow Launched: {{ workflow_launch.id }}"
          - "Status: {{ workflow_launch.status }}"

    # ✅ Step 8: Update ServiceNow Request Status
    - name: Update ServiceNow Request Status
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_req_item/{{ item_sys_id }}"
        method: PATCH
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        body_format: json
        body:
          state: "3"  # Closed state
          comments: "Password reset flow executed successfully after manager approval"
        status_code: 200
