---
- hosts: localhost
  gather_facts: no
  vars:
    servicenow_instance: "https://dev247928.service-now.com/"
    servicenow_username: "admin"
    servicenow_password: "%ml4Vs9RXE/s"
    
  tasks:
    - name: Check Pending Approval Requests
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_request"
        method: GET
        user: "{{ servicenow_username }}"
        password: "{{ servicenow_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        params:
          sysparm_query: "state=IN_APPROVAL"
          sysparm_fields: "sys_id,number,requested_for,short_description"
        return_content: yes
      register: pending_approvals

    - name: Process Approved Requests
      block:
        - name: Iterate Through Approved Requests
          uri:
            url: "{{ servicenow_instance }}/api/now/table/sc_request/{{ item.sys_id }}"
            method: GET
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            force_basic_auth: yes
            headers:
              Content-Type: "application/json"
          loop: "{{ pending_approvals.json.result }}"
          register: request_details
          when: item.sys_id is defined

        - name: Retrieve Request Item Details
          uri:
            url: "{{ servicenow_instance }}/api/now/table/sc_req_item"
            method: GET
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            force_basic_auth: yes
            headers:
              Content-Type: "application/json"
            params:
              sysparm_query: "request={{ item.sys_id }}"
              sysparm_fields: "sys_id,cat_item,request,state"
          loop: "{{ pending_approvals.json.result }}"
          register: request_items
          when: item.sys_id is defined

        - name: Extract Variable Values
          uri:
            url: "{{ servicenow_instance }}/api/now/table/sc_item_option_mtom"
            method: GET
            user: "{{ servicenow_username }}"
            password: "{{ servicenow_password }}"
            force_basic_auth: yes
            headers:
              Content-Type: "application/json"
            params:
              sysparm_query: "request_item={{ item.sys_id }}"
              sysparm_fields: "item_option_text,value"
          loop: "{{ request_items.results | selectattr('item.sys_id', 'defined') | list }}"
          register: option_values
          when: item.item.sys_id is defined

        - name: Trigger Next Action for Approved Requests
          block:
            - name: Update Request State
              uri:
                url: "{{ servicenow_instance }}/api/now/table/sc_request/{{ item.sys_id }}"
                method: PATCH
                user: "{{ servicenow_username }}"
                password: "{{ servicenow_password }}"
                force_basic_auth: yes
                headers:
                  Content-Type: "application/json"
                body:
                  state: "PROCESSING"
                body_format: json
              loop: "{{ pending_approvals.json.result }}"
              when: item.sys_id is defined

            - name: Initiate Password Reset Process
              uri:
                url: "https://graph.microsoft.com/v1.0/users/{{ user_email }}/passwordPrincipal"
                method: PATCH
                headers:
                  Authorization: "Bearer {{ access_token }}"
                  Content-Type: "application/json"
                body:
                  passwordProfile:
                    forceChangePasswordNextSignIn: true
                    password: "{{ new_password }}"
                status_code: [200, 204]
              vars:
                user_email: "{{ (option_values.results | selectattr('item.item.sys_id', 'defined') | first).json.result | selectattr('item_option_text', 'equalto', 'user_email') | first.value }}"
                new_password: "{{ (option_values.results | selectattr('item.item.sys_id', 'defined') | first).json.result | selectattr('item_option_text', 'equalto', 'password') | first.value }}"
              when: option_values.results | length > 0

      rescue:
        - name: Log Errors
          debug:
            msg: "Error processing approved requests: {{ ansible_failed_result }}"

    - name: Final Status Check
      debug:
        msg: "Completed processing of approved requests"
