---
- hosts: localhost
  gather_facts: no
  vars:
    servicenow_instance: "https://dev247928.service-now.com"
    servicenow_username: "admin"
    servicenow_password: "%ml4Vs9RXE/s"
    catalog_sys_id: "d58f4b528388e210d081f696feaad399"
    user_email: "Akhilakki@amitomar63gmail.onmicrosoft.com"
    new_password: "NewPassword@123"
    system_admin_id: "6816f79cc0a8016401c5a33be04be441"   # ✅ System Administrator ID
    approval_timeout: 600   # 10 minutes
    approval_interval: 30

  tasks:
    # ✅ Step 1: Add Catalog Item to Cart
    - name: Add Catalog Item to Cart
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_cart_item"
        method: POST
        url_username: "{{ servicenow_username }}"
        url_password: "{{ servicenow_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          cat_item: "{{ catalog_sys_id }}"
          quantity: 1
          variables:
            user_email: "{{ user_email }}"
            password: "{{ new_password }}"
        body_format: json
        return_content: yes
        status_code: [200, 201]
      register: cart_response

    # ✅ Step 2: Extract Cart ID
    - name: Extract Cart ID
      set_fact:
        cart_id: "{{ cart_response.json.result.cart }}"

    # ✅ Step 3: Checkout Cart
    - name: Checkout Cart with System Administrator Approval
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_request"
        method: POST
        url_username: "{{ servicenow_username }}"
        url_password: "{{ servicenow_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          cart: "{{ cart_id }}"
          short_description: "Password reset request for {{ user_email }}"
          requested_for: "{{ user_email }}"
          special_instructions: "Auto-triggered by Ansible playbook"
          upon_approval: "proceed"
          upon_reject: "cancel"
          assigned_to: "{{ system_admin_id }}"  # ✅ Assign directly to System Administrator
          approval: "requested"
        body_format: json
        return_content: yes
        status_code: [200, 201]
      register: order_response

    # ✅ Step 4: Extract Request ID
    - name: Extract Request ID
      set_fact:
        request_id: "{{ order_response.json.result.sys_id }}"

    # ✅ Step 5: Fetch Request Details
    - name: Fetch Request Details
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_request/{{ request_id }}"
        method: GET
        url_username: "{{ servicenow_username }}"
        url_password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
        status_code: 200
      register: request_details

    - name: Debug Request Details
      debug:
        var: request_details.json

    # ✅ Step 6: Create Approval Record
    - name: Create Approval Record
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sysapproval_approver"
        method: POST
        url_username: "{{ servicenow_username }}"
        url_password: "{{ servicenow_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body:
          sysapproval: "{{ request_id }}"
          approver: "{{ system_admin_id }}"  # ✅ Direct approval assignment
          state: "requested"
        body_format: json
        return_content: yes
        status_code: [200, 201]
      register: approval_record

    - name: Debug Approval Record
      debug:
        var: approval_record.json

    # ✅ Step 7: Wait for System Administrator Approval
    - name: Wait for System Administrator Approval
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sysapproval_approver"
        method: GET
        url_username: "{{ servicenow_username }}"
        url_password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
        status_code: 200
        body_format: json
      register: approval_status
      until: approval_status.json.result[0].state == "approved"
      retries: "{{ approval_timeout // approval_interval }}"
      delay: "{{ approval_interval }}"
      ignore_errors: yes

    # ✅ Step 8: Validate Approval Status
    - name: Validate Approval Status
      fail:
        msg: "Request was NOT approved in time!"
      when: approval_status.json.result[0].state != "approved"

    # ✅ Step 9: Retrieve Request Items
    - name: Retrieve Request Items
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_req_item?sysparm_query=request={{ request_id }}"
        method: GET
        url_username: "{{ servicenow_username }}"
        url_password: "{{ servicenow_password }}"
        force_basic_auth: yes
        return_content: yes
        status_code: 200
      register: request_items

    - name: Debug Request Items Response
      debug:
        var: request_items.json

    # ✅ Step 10: Validate and Extract User Principal Name
    - name: Validate Request Items Length
      fail:
        msg: "No request items found or empty response!"
      when: request_items.json.result | length == 0

    - name: Extract User Principal Name
      set_fact:
        user_principle_name: "{{ request_items.json.result[0].variables.user_email | default('') }}"

    - name: Debug Extracted User Principal Name
      debug:
        msg: "User Principal Name: {{ user_principle_name }}"

    # ✅ Step 11: Trigger AWX Workflow
    - name: Launch **Azure Password Reset Flow**
      awx.awx.job_launch:
        job_template: "Azure Password Reset Flow"
        extra_vars:
          user_principle_name: "{{ user_principle_name }}"
          request_id: "{{ request_id }}"
      register: workflow_launch

    - name: Debug Workflow Execution
      debug:
        msg:
          - "Workflow Launched: {{ workflow_launch.id }}"
          - "Status: {{ workflow_launch.status }}"

    # ✅ Step 12: Update ServiceNow Request Status
    - name: Update ServiceNow Request Status
      uri:
        url: "{{ servicenow_instance }}/api/now/table/sc_request/{{ request_id }}"
        method: PATCH
        url_username: "{{ servicenow_username }}"
        url_password: "{{ servicenow_password }}"
        force_basic_auth: yes
        body_format: json
        body:
          state: "3"  # Completed state
          comments: "Password reset workflow executed successfully after system administrator approval"
        status_code: 200
